// Applet written for use on www.langleylds web page,

//June 1999
// Load an array of images, loop through the array,
// and display each image.
import java.applet.Applet;
import java.awt.*;

public class rsbanner extends Applet implements Runnable {
   private Image deitel[];
	
   private int totalImages = 6,  // total number of images
               currentImage = 0,  // current image subscript
               sleepTime;    // milliseconds to sleep, set by random number generator below
   private double random;


   // The next two objects are for double-buffering
   private Graphics gContext; // off-screen graphics context 
   private Image buffer;      // buffer in which to draw image

   private MediaTracker imageTracker; // used to track images

   private Thread animate;      // animation thread

   // load the images when the applet begins executing
   public void init()
   {
      deitel = new Image[ totalImages ];
      buffer = createImage( 400, 170 ); // create image buffer with size of gifs
      gContext = buffer.getGraphics(); // get graphics context

      // set background of buffer
      gContext.setColor( new Color(255,153,204));
      gContext.fillRect( 0, 0, 400, 170 );

      imageTracker = new MediaTracker( this );

      for ( int i = 0; i <totalImages; i++ ) {
         deitel[ i ] = getImage( getDocumentBase(),
            "rsbanner" + i + ".gif" );

         // track loading image
         imageTracker.addImage( deitel[ i ], i );
      }


      try {
         imageTracker.waitForID( 0 );
      }
      catch( InterruptedException e ) { }
   }                                     

   // start the applet
   public void start()
   {
      // Start with random image

	random=Math.random();//random number 0-1<

	if (random<0.2) currentImage=0; //first image
	else if (random>=0.2 & random<0.4) currentImage=1; //second image
	else if (random>=0.4 & random<0.6) currentImage=2;
	else if (random>=0.6 & random<0.75) currentImage=3;
	else if (random>=0.75 & random<0.88) currentImage=4;
	else  currentImage=5;
	//now draw the currentImage
      gContext.drawImage( deitel[currentImage], 0, 0, this );
      

      // create a new animation thread when user visits page
      if ( animate == null ) {
         animate = new Thread( this );
         animate.start();
      }
   }

   // terminate animation thread when user leaves page
   public void stop()
   {
      if ( animate != null ) {
         animate.stop();
         animate = null;
      }
   }

   // display the image in the Applet's Graphics context
   public void paint( Graphics g )
   {
      g.drawImage( buffer, 0, 0, this );
   }

   // override update to eliminate flicker
   public void update( Graphics g ) { paint( g ); }

   public void run()
   {
      while ( true ) 
     {
         if ( imageTracker.checkID( currentImage, true ) ) 
	{
            // clear previous image from buffer
            gContext.fillRect( 0, 0, 400, 170 );
          
            // draw new image in buffer
            gContext.drawImage(
               deitel[currentImage ], 0, 0, this );
   
            currentImage = ( currentImage + 1 ) % totalImages;//ensurse currentImage NOT greater thantotal images
         }




/*Set Sleep Time here ******************************/

	sleepTime=400; //change just this to adjust all sleeptimes.
	random=Math.random();//random number 0-1<

	if (random>=0.333 & random<0.6667) sleepTime=sleepTime*2; //medium
	else if (random>=0.6667 & random<1) sleepTime=sleepTime*5; // slow
	//else random is<0.333) thus sleepTime=sleepTime*1; //fast 

/******End of sleep time section******************/



         try {
            Thread.sleep( sleepTime );
         }
         catch ( InterruptedException e ) {
            showStatus( e.toString() );
         }
	

	
         repaint();  // display buffered image
      }
   }
}
                                        
